[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CAST4Ecology Modelling Tutorial",
    "section": "",
    "text": "This is a reproducible code to create the figures of the book chapter CAST4Ecology."
  },
  {
    "objectID": "index.html#preparations",
    "href": "index.html#preparations",
    "title": "CAST4Ecology Modelling Tutorial",
    "section": "Preparations",
    "text": "Preparations\n\nNeeded R Packages\n\n# for (spatial) data handling\nlibrary(terra)\nlibrary(sf)\nlibrary(tidyverse)\n\n# modelling\nlibrary(caret)\nlibrary(CAST)\nlibrary(ranger)\n\n# visuals\nlibrary(tmap)\nlibrary(viridis)\nlibrary(scales)\nlibrary(ggpubr)\n\n\n\nExample data\n\n## Wording:\n# training_data: reference samples without coordinates\n# predictors: spatially continuous predictor stack of South America\n# modeldomain: where we want to predict (the outline of South America)\n# predictor_names: names of predictors in the training_data and the predictor stack\n# response_name: name of the response variable in plots\n\n\n\ndata(splotdata) # load reference samples (example data from the CAST package)\n\npredictors &lt;- rast(\"data/predictors.tif\")\ntraining_data &lt;- splotdata |&gt; st_drop_geometry() # reference samples without coordinates\nmodeldomain &lt;- st_read(\"data/modeldomain.gpkg\", quiet = TRUE)\nmodeldomain &lt;- st_transform(modeldomain,st_crs(splotdata))\n\n\npredictor_names &lt;- names(predictors)\nresponse_name &lt;- \"Species_richness\"\n\n# define color palette\nOkabe_Ito &lt;- c(\"#E69F00\", \"#56B4E9\", \"#009E73\", \"#F0E442\", \"#CC79A7\") \n\n\ntm_shape(modeldomain)+\n    tm_borders()+\n    tm_shape(splotdata)+\n    tm_symbols(col = \"Species_richness\", style = \"cont\",\n               legend.col.reverse = TRUE,\n               palette = plasma(50, direction = -1),\n               size = 0.2, title.col = \"Species richness\")+\n    tm_layout(frame = FALSE)\n\n\n\n\n\np = predictors[[c(\"bio_4\", \"bio_12\", \"bio_8\", \"elev\")]]\nnames(p) = c(\"Temp. Seasonality\", \"Annual Precipitation\", \"Temp. wettest quarter\", \"Elevation\")\n\ntm_shape(p)+\n    tm_raster(style = \"cont\", title = \"\", legend.reverse = TRUE)+\n    tm_facets(free.scales = TRUE, ncol = 2)+\n    tm_layout(legend.position = c(\"right\", \"bottom\"),\n              legend.just = \"left\",\n              panel.show = TRUE,\n              panel.labels = names(p),\n              panel.label.bg.color = NA,\n              frame.lwd = NA,\n              frame = FALSE)"
  },
  {
    "objectID": "index.html#a-first-simple-prediction-model",
    "href": "index.html#a-first-simple-prediction-model",
    "title": "CAST4Ecology Modelling Tutorial",
    "section": "A first simple prediction model",
    "text": "A first simple prediction model\n\nset.seed(6502)\nrfmodel_rcv &lt;- caret::train(x = training_data |&gt; select(all_of(predictor_names)),\n                            y = training_data |&gt; pull(response_name),\n                            method = \"ranger\",\n                            num.trees = 100,\n                            trControl = trainControl(method = \"cv\",\n                                                     savePredictions = TRUE))\n\nprediction_rcv &lt;- predict(predictors, rfmodel_rcv, na.rm = TRUE)\n\n\ntm_shape(prediction_rcv)+\n    tm_raster(title = \"Predicted \\nSpecies Richness\", style = \"cont\",\n              palette = mako(50, begin = 0.2),\n              legend.reverse = TRUE)+\n        tm_layout(legend.position = c(\"right\", \"bottom\"),\n              legend.just = \"left\",\n              frame = FALSE)"
  },
  {
    "objectID": "index.html#cross-validation-to-estimate-the-map-accuracy",
    "href": "index.html#cross-validation-to-estimate-the-map-accuracy",
    "title": "CAST4Ecology Modelling Tutorial",
    "section": "Cross-validation to estimate the map accuracy",
    "text": "Cross-validation to estimate the map accuracy\n\ngeo_distance = geodist(splotdata, modeldomain)\n\nplot(geo_distance) + \n    scale_y_continuous(expand = c(0,0))+\n    scale_x_continuous(expand = c(0,0),\n                       trans = \"log10\",\n                       labels = trans_format(\"log10\", math_format(10^.x)))+\n    theme_light()+\n    theme(legend.position = \"bottom\")\nplot(geo_distance, stat = \"ecdf\")+\n  scale_x_continuous(expand = c(0,0))+\n  theme_light()+\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\n\n\n\n\nSetting up knndm-cv\n\nsetting up cv folds such that between-folds distance matches sample-prediction distance\ncv more representative of actual prediction task\n\n\nknndm_folds = CAST::knndm(tpoints = splotdata,\n                          modeldomain = modeldomain, k = 5)\n\nsplotdata$fold = knndm_folds$clusters\nsplotdata$random_fold = sample(seq(5),\n                               size = nrow(splotdata),\n                               replace = TRUE) ## imitating a random 5 fold cross validation\n\n\ntm_shape(modeldomain)+\n    tm_borders()+\n    tm_shape(splotdata)+\n    tm_symbols(col = \"random_fold\", style = \"cat\",\n               legend.col.reverse = FALSE,\n               palette = Okabe_Ito,\n               size = 0.2, title.col = \"Random Folds\",\n               legend.col.is.portrait = FALSE)+\n    tm_layout(frame = FALSE)\n\n\n\n\n\ngd_rcv &lt;- geodist(splotdata,\n                  modeldomain,\n                  cvfolds = splotdata$random_fold)\n\nplot(gd_rcv, stat = \"density\") + \n    scale_y_continuous(expand = c(0,0))+\n    scale_x_continuous(expand = c(0,0),\n                       trans = \"log10\",\n                       labels = trans_format(\"log10\", math_format(10^.x)))+\n    theme_light()+\n    theme(legend.position = \"bottom\")\nplot(gd_rcv, stat = \"ecdf\") +\n  scale_x_continuous(limits = c(0,1500000), expand = c(0,0))+\n  theme_light()+\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(modeldomain)+\n    tm_borders()+\n    tm_shape(splotdata)+\n    tm_symbols(col = \"fold\", style = \"cat\",\n               legend.col.reverse = FALSE,\n               palette = Okabe_Ito,\n               size = 0.2, title.col = \"knndm Folds\",\n               legend.col.is.portrait = FALSE)+\n    tm_layout(frame = FALSE)\n\n\n\n\n\ngd_knndm &lt;- geodist(splotdata,\n                    modeldomain,\n                    cvfolds = splotdata$fold)\n\nplot(gd_knndm, stat = \"density\") + \n    scale_y_continuous(expand = c(0,0))+\n    scale_x_continuous(expand = c(0,0),\n                       trans = \"log10\",\n                       labels = trans_format(\"log10\", math_format(10^.x)))+\n    theme_light()+\n    theme(legend.position = \"bottom\")\nplot(gd_knndm, stat = \"ecdf\")+ \n  scale_x_continuous(limits = c(0,1500000))+\n  theme_light()+\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nRandom Forest Model with knndm-cv\n\ntr_control &lt;- trainControl(method = \"cv\",\n                         number = 5,\n                         index = knndm_folds$indx_train,\n                         savePredictions = TRUE)\n\n\nset.seed(51)\nrfmodel_knndmcv &lt;- caret::train(x = training_data[,predictor_names],\n                           y = training_data[,response_name],\n                           method = \"ranger\",\n                           num.trees = 100,\n                           trControl = tr_control)"
  },
  {
    "objectID": "index.html#spatial-model-tuning-and-feature-selection",
    "href": "index.html#spatial-model-tuning-and-feature-selection",
    "title": "CAST4Ecology Modelling Tutorial",
    "section": "Spatial model tuning and feature selection",
    "text": "Spatial model tuning and feature selection\n\nsimplify the model by selecting predictors based on their performance in new regions\nnew regions are defined by spatial cv folds (here knndm approach)\nruntime ~ 10 min\n\n\nset.seed(62)\nrfmodel_ffs &lt;- CAST::ffs(training_data[,predictor_names],\n                         training_data[,response_name],\n                         method = \"ranger\",\n                         importance = \"permutation\",\n                         num.trees = 100,\n                         trControl = tr_control,\n                         verbose = FALSE)\n\n\n# test simplified model with random CV \nset.seed(5)\nrfmodel_ffs_random =  caret::train(x = training_data |&gt; select(all_of(rfmodel_ffs$selectedvars)),\n                            y = training_data |&gt; pull(response_name),\n                            method = \"ranger\",\n                            num.trees = 100,\n                            trControl = trainControl(method = \"cv\",\n                                                     savePredictions = TRUE))\nglobal_validation(rfmodel_ffs_random)\n\n      RMSE   Rsquared        MAE \n24.3062561  0.7076351 14.3439986 \n\n\n\nprediction_ffs &lt;- predict(predictors, rfmodel_ffs, na.rm = TRUE)\ncv_results = rbind(global_validation(rfmodel_rcv),\n    global_validation(rfmodel_knndmcv),\n    global_validation(rfmodel_ffs),\n    global_validation(rfmodel_ffs_random)) |&gt; \n    as.data.frame() |&gt; mutate(\"CV\" = c(\"random\", \"knndm\", \"knndm\", \"random\"),\n                              \"predictors\" = c(ncol(rfmodel_rcv$trainingData)-1,\n                                               ncol(rfmodel_knndmcv$trainingData)-1, \n                                               ncol(rfmodel_ffs$trainingData)-1,\n                                               paste0(ncol(rfmodel_ffs$trainingData)-1, \"*\")))\nknitr::kable(cv_results)\n\n\n\n\nRMSE\nRsquared\nMAE\nCV\npredictors\n\n\n\n\n24.15884\n0.7108186\n14.12313\nrandom\n11\n\n\n33.33642\n0.4747866\n20.64559\nknndm\n11\n\n\n31.97234\n0.5284539\n20.70516\nknndm\n5\n\n\n24.30626\n0.7076351\n14.34400\nrandom\n5*\n\n\n\n\n\n\ntm_shape(prediction_ffs)+\n    tm_raster(title = \"Predicted \\nSpecies Richness\", style = \"cont\",\n              palette = mako(50, begin = 0.2),\n              legend.reverse = TRUE)+\n        tm_layout(legend.position = c(\"right\", \"bottom\"),\n              legend.just = \"left\",\n              frame = FALSE)\n\n\n\n\n\nplot(rfmodel_ffs, plotType = \"selected\")+\n  theme_light()+\n  theme(panel.grid.major.y = element_blank(),\n        axis.text = element_text(color = \"black\", size = 10))"
  },
  {
    "objectID": "index.html#assessment-of-the-area-of-applicability",
    "href": "index.html#assessment-of-the-area-of-applicability",
    "title": "CAST4Ecology Modelling Tutorial",
    "section": "Assessment of the area of applicability",
    "text": "Assessment of the area of applicability\n\nAOA = CAST::aoa(predictors, model = rfmodel_ffs, LPD=TRUE, verbose = FALSE)\n\n\nplot(AOA)+\n  scale_x_continuous(expand = c(0,0))\n\n\n\n\n\ntm_shape(AOA$DI)+\n    tm_raster(palette = viridis(50), style = \"cont\", legend.reverse = TRUE, breaks = c(0,0.1,AOA$parameters$threshold,0.5,1,1.5))+\n            tm_layout(legend.position = c(\"right\", \"bottom\"),\n              legend.just = \"left\",\n              frame = FALSE)\n\n\n\ntm_shape(AOA$LPD)+\n    tm_raster(palette = viridis(50), style = \"cont\", legend.reverse = TRUE)+\n            tm_layout(legend.position = c(\"right\", \"bottom\"),\n              legend.just = \"left\",\n              frame = FALSE)\n\n\n\ntm_shape(prediction_ffs)+\n    tm_raster(title = \"Predicted \\nSpecies Richness\", style = \"cont\",\n              palette = mako(50, begin = 0.2),\n              legend.reverse = TRUE)+\n    tm_shape(AOA$AOA)+\n    tm_raster(palette = c(\"1\" = NA, \"0\" = \"darkgoldenrod1\"), style = \"cat\", legend.show = FALSE)+\n    tm_add_legend(type = \"fill\", col = \"darkgoldenrod1\", border.lwd = 0,labels = \"Outside AOA\")+\n        tm_layout(legend.position = c(\"right\", \"bottom\"),\n              legend.just = \"left\",\n              frame = FALSE)"
  },
  {
    "objectID": "index.html#pixel-wise-performance-estimation",
    "href": "index.html#pixel-wise-performance-estimation",
    "title": "CAST4Ecology Modelling Tutorial",
    "section": "Pixel-wise performance estimation",
    "text": "Pixel-wise performance estimation\n\nset.seed(5)\nperformancemodel = errorProfiles(model = rfmodel_ffs, trainDI = AOA$parameters)\nexpected_RMSE = terra::predict(AOA$DI, performancemodel)\nexpected_RMSE = terra::mask(expected_RMSE, AOA$AOA, maskvalues = 0)\n\n\nplot(performancemodel)+\n  scale_y_continuous(name = \"RMSE\")+\n  theme_light()+\n  theme(legend.position = \"bottom\", legend.title = element_blank())\n\n\n\n\n\ntm_shape(expected_RMSE)+\n    tm_raster(title = \"Expected \\nRMSE\", style = \"cont\", legend.reverse = TRUE, palette = mako(50, direction = -1))+\n    tm_shape(AOA$AOA)+\n    tm_raster(palette = c(\"1\" = NA, \"0\" = \"darkgoldenrod1\"), style = \"cat\", legend.show = FALSE)+\n    tm_add_legend(type = \"fill\", col = \"darkgoldenrod1\", border.lwd = 0,labels = \"Outside AOA\")+\n            tm_layout(legend.position = c(\"right\", \"bottom\"),\n              legend.just = \"left\",\n              frame = FALSE)"
  }
]