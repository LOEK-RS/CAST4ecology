---
title: "sPlotOpen Worldclim Modelling"
format: html
execute:
  warning: false
  message: false
---



```{r packages}
library(sf)
library(terra)
library(tidyverse)
library(caret)
library(CAST)
library(mapview)
```



## Input

```{r}
# 1. plots with response
# 2. predictors
# 3. model domain (country borders)
# 4. predictor names
# 5. response name

plots = st_read("data/plots.gpkg", quiet = TRUE)
predictors = rast("data/predictors.tif")
modeldomain = st_read("data/modeldomain.gpkg", quiet = TRUE)
predictor_names = names(predictors)
response_name = "Species_richness"
```



## Preparations

```{r}
training_data = plots |> st_drop_geometry()

knn_setup = CAST::knndm(tpoints = st_transform(plots, 4326),
                        modeldomain = st_transform(modeldomain, 4326), 
                        samplesize = 4000, k = 5)

saveRDS(knn_setup, "modelling/knn_setup.RDS")
```


```{r}
plots$fold = knn_setup$clusters
plot(knn_setup)
```


## RF Model with Random CV

```{r}
set.seed(1)
rfmodel_rcv = caret::train(x = training_data |> select(all_of(predictor_names)),
                           y = training_data |> pull(response_name),
                           method = "ranger",
                           num.trees = 100,
                           tuneGrid = expand.grid(splitrule = "variance",
                                           mtry = 2,
                                           min.node.size = 5),
                           trControl = trainControl(method = "cv",
                                                    number = 5,
                                                    savePredictions = TRUE),
                           importance = "permutation")

global_validation(rfmodel_rcv)
plot(varImp(rfmodel_rcv))

saveRDS(rfmodel_rcv, "modelling/randomcv_model.RDS")
```




```{r}
rcv_prediction = predict(predictors, rfmodel_rcv, na.rm = TRUE)
rcv_aoa = CAST::aoa(predictors, rfmodel_rcv)
rcv_plot = plot(rcv_aoa)


saveRDS(rcv_prediction, "modelling/randomcv_prediction.RDS")
saveRDS(rcv_aoa$parameters, "modelling/randomcv_aoastats.RDS")
saveRDS(rcv_aoa$DI, "modelling/randomcv_DI.RDS")
saveRDS(rcv_aoa$AOA, "modelling/randomcv_AOA.RDS")
saveRDS(rcv_plot, "modelling/randomcv_aoaplot.RDS")
```


```{r}
#| layout-ncol: 2
plot(rcv_prediction)
plot(rcv_aoa$AOA)
```


## RF Model with Spatial CV

```{r}
set.seed(1)
rfmodel_scv = caret::train(x = training_data |> select(all_of(predictor_names)),
                           y = training_data |> pull(response_name),
                           method = "ranger",
                           num.trees = 100,
                           tuneGrid = expand.grid(splitrule = "variance",
                                           mtry = 2,
                                           min.node.size = 5),
                           trControl = trainControl(method = "cv",
                                                    number = 5,
                                                    index = knn_setup$indx_train,
                                                    indexOut = knn_setup$indx_test,
                                                    savePredictions = TRUE),
                           importance = "permutation")

global_validation(rfmodel_scv)

saveRDS(rfmodel_scv, "modelling/spatialcv_model.RDS")


```


```{r}
scv_aoa = CAST::aoa(predictors, rfmodel_scv)
scv_plot = plot(scv_aoa)

saveRDS(scv_aoa$parameters, "modelling/spatialcv_aoastats.RDS")
saveRDS(scv_aoa$DI, "modelling/spatialcv_DI.RDS")
saveRDS(scv_aoa$AOA, "modelling/spatialcv_AOA.RDS")
saveRDS(scv_plot, "modelling/spatialcv_aoaplot.RDS")
```





## Feature Selection

```{r}
set.seed(2)
ffs_knncv = CAST::ffs(predictors = training_data |> select(all_of(predictor_names)),
                      response = training_data |> pull(response_name),
                      method = "ranger",
                      num.trees = 100,
                      minVar = 2,
                      tuneGrid = expand.grid(splitrule = "variance",
                                             mtry = 2,
                                             min.node.size = 5),
                      trControl = trainControl(method = "cv",
                                               number = 5,
                                               index = knn_setup$indx_train,
                                               indexOut = knn_setup$indx_test,
                                               savePredictions = TRUE),
                      importance = "permutation",
                      verbose = FALSE)
global_validation(ffs_knncv)

saveRDS(ffs_knncv, "modelling/ffs_model.RDS")


```



```{r}
knncv_prediction = predict(predictors, ffs_knncv, na.rm = TRUE)
knncv_aoa = CAST::aoa(predictors, ffs_knncv)
knncv_plot = plot(knncv_aoa)



saveRDS(knncv_prediction, "modelling/ffs_prediction.RDS")
saveRDS(knncv_aoa$parameters, "modelling/ffs_aoastats.RDS")
saveRDS(knncv_aoa$DI, "modelling/ffs_DI.RDS")
saveRDS(knncv_aoa$AOA, "modelling/ffs_AOA.RDS")
saveRDS(knncv_plot, "modelling/ffs_aoaplot.RDS")


```


```{r}
#| layout-ncol: 2
plot(knncv_prediction)
plot(knncv_aoa$AOA)
```


```{r}
set.seed(10)
knncv_calib = calibrate_aoa(knncv_aoa, model = ffs_knncv, multiCV = TRUE, length.out = 4)

calib = attributes(knncv_calib$AOA)$calib

saveRDS(calib, "modelling/ffs_calibdata.RDS")
saveRDS(knncv_calib$AOA$AOA, "modelling/ffs_updatedAOA.RDS")
saveRDS(knncv_calib, "modelling/ffs_expected.RDS")
saveRDS(knncv_calib$AOA$expected_RMSE, "modelling/ffs_expectedRMSE.RDS")

```







