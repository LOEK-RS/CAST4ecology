# Data Preprocessing



### Response: sPlotOpen Species Richness

```{r splotopen-download}
#| eval: false
#| code-fold: true
#| code-summary: "Download sPlotOpen"

# download sPlotOpen if not already done
if(!file.exists("raw/splotopen/sPlotOpen.RData")){
  download.file("https://idata.idiv.de/ddm/Data/DownloadZip/3474?version=5779", destfile = "raw/splotopen.zip")
  unzip("raw/splotopen.zip", exdir = "raw/splotopen")
  unzip("raw/splotopen/sPlotOpen.RData(2).zip", exdir = "raw/splotopen")
}
```

### Predictor Data: Worldclim


```{r splotopen-southamerica}
#| eval: true
#| code-fold: true
#| code-summary: "Species Richness for South America"

# Gather Response Variable: sPlotOpen Species Richness for South America
## see Appendix 1 of https://doi.org/10.1111/geb.13346
load("raw/splotopen/sPlotOpen.RData")

splot = header.oa |>
    filter(Resample_1 == TRUE) |>
    filter(Continent == "South America") |> 
    st_as_sf(coords = c("Longitude", "Latitude"), crs = 4326) |> 
    left_join(CWM_CWV.oa |> select(c("PlotObservationID", "Species_richness"))) |> 
    select(c("PlotObservationID", "GIVD_ID", "Country", "Biome",
             "Species_richness")) |> 
    na.omit()

# cleanup workspace
rm(CWM_CWV.oa, DT2.oa, header.oa, metadata.oa, reference.oa, sPlotOpen_citation)
```





```{r}
# define region: all of south america
modeldomain = rnaturalearth::ne_countries(continent = "South America", returnclass = "sf", scale = 110)

# download or load worldclim for prediction
wc = geodata::worldclim_global(var = "bio", res = 5, path = "raw/")
elev = geodata::elevation_global(res = 5, path = "raw/")

# reduce predictor data to model domain
predictors = c(wc, elev)
predictors = crop(predictors, modeldomain)
names(predictors) = names(predictors) |> str_remove(pattern = "wc2.1_5m_") # clean up layer names

```



```{r splotopen-extracting}
#| message: false
#| code-fold: true
#| code-summary: "Compile response and predictors as reference samples"


# skipping: extracting worldclim in full resolution in order to get more training data
# this would take long and requires a lot of ram/cpu since global worldclim is a large file

if(FALSE){
  
wcf = rast(list.files("~/data/global_environmental_layer/geodata_30s/", full.names = TRUE))
wcf = crop(wcf, modeldomain)
names(wcf) = names(wcf) |> str_remove(pattern = "wc2.1_30s_")
wcf$lat = terra::init(wcf, "y")
wcf$lon = terra::init(wcf, "x")
wcf = c(wcf, wcf_terrain)

# extract predictor values and attach to response
splot = terra::extract(wcf, splot, ID = FALSE, bind = TRUE) |>
    st_as_sf() |> 
    na.omit()

# only keep unique locations
## some reference sample locations are in the same predictor stack pixel
## this can lead to erroneous models and misleading validations
plots_uni = splot[!duplicated(c(splot$lat, splot$lon)),]
plots_uni = plots_uni |> na.omit()
plots_uni$lat = NULL
plots_uni$lon = NULL


}

# instead, we compiled the predictor data for reference samples:
splot_predictors = readRDS("reference_predictors.RDS")
plots = right_join(splot, splot_predictors, by = join_by("PlotObservationID"))
```




